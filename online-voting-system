import os
import json
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS

# --- Data Model Classes (Candidate, Voter) ---

class Candidate:
    def __init__(self, candidate_id, name, position):
        self.candidate_id = candidate_id
        self.name = name
        self.position = position
        self.vote_count = 0

    def to_dict(self):
        return {
            "candidate_id": self.candidate_id,
            "name": self.name,
            "position": self.position,
            "vote_count": self.vote_count
        }

    @staticmethod
    def from_dict(data):
        c = Candidate(data["candidate_id"], data["name"], data["position"])
        c.vote_count = data.get("vote_count", 0)
        return c

class Voter:
    def __init__(self, voter_id, name):
        self.voter_id = voter_id
        self.name = name
        self.voted_positions = set()

    def to_dict(self):
        return {
            "voter_id": self.voter_id,
            "name": self.name,
            "voted_positions": list(self.voted_positions)
        }

    @staticmethod
    def from_dict(data):
        v = Voter(data["voter_id"], data["name"])
        v.voted_positions = set(data.get("voted_positions", []))
        return v

# --- Core Logic Class ---

class VotingSystem:
    def __init__(self, filename="data.json"):
        self.filename = filename
        self.candidates = {}
        self.voters = {}
        self.load_data()

    def load_data(self):
        if not os.path.exists(self.filename):
            self.save_data() 
            return
        try:
            with open(self.filename, "r") as f:
                content = f.read()
                if not content: return
                data = json.loads(content)
                self.candidates = {cid: Candidate.from_dict(cdata) for cid, cdata in data.get("candidates", {}).items()}
                self.voters = {vid: Voter.from_dict(vdata) for vid, vdata in data.get("voters", {}).items()}
        except (json.JSONDecodeError, FileNotFoundError):
            self.candidates = {}
            self.voters = {}

    def save_data(self):
        data = {
            "candidates": {cid: c.to_dict() for cid, c in self.candidates.items()},
            "voters": {vid: v.to_dict() for vid, v in self.voters.items()}
        }
        with open(self.filename, "w") as f:
            json.dump(data, f, indent=4)

    def add_candidate(self, candidate_id, name, position):
        if not all([candidate_id, name, position]):
            return False, "All candidate fields are required."
        if candidate_id in self.candidates:
            return False, "Candidate ID already exists."
        self.candidates[candidate_id] = Candidate(candidate_id, name, position)
        self.save_data()
        return True, "Candidate added successfully."

    def add_voter(self, voter_id, name):
        if not all([voter_id, name]):
            return False, "Voter ID and Name are required."
        if voter_id in self.voters:
            return False, "Voter ID already exists."
        self.voters[voter_id] = Voter(voter_id, name)
        self.save_data()
        return True, "Voter added successfully."

    def cast_vote(self, voter_id, candidate_id):
        if voter_id not in self.voters:
            return False, "Invalid Voter ID."
        if candidate_id not in self.candidates:
            return False, "Invalid Candidate ID."
        
        voter = self.voters[voter_id]
        candidate = self.candidates[candidate_id]
        
        if candidate.position in voter.voted_positions:
            return False, f"You have already voted for the position of {candidate.position}."
        
        candidate.vote_count += 1
        voter.voted_positions.add(candidate.position)
        self.save_data()
        return True, f"Vote successfully cast for {candidate.name}."

    def get_results(self):
        positions = {}
        for candidate in self.candidates.values():
            if candidate.position not in positions:
                positions[candidate.position] = []
            positions[candidate.position].append(candidate.to_dict())
        
        for position in positions:
            positions[position] = sorted(positions[position], key=lambda c: c['vote_count'], reverse=True)
            
        return positions

# --- Flask App Setup ---

app = Flask(__name__, static_folder='.', static_url_path='')
CORS(app)

voting_system = VotingSystem(filename="data.json")

# API endpoint to serve the main HTML file
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/api/<path:action>', methods=['POST'])
def handle_post(action):
    data = request.get_json()
    if not data:
        return jsonify({"success": False, "message": "Invalid request format."}), 400

    if action == 'add_candidate':
        success, message = voting_system.add_candidate(data.get('candidate_id'), data.get('name'), data.get('position'))
    elif action == 'add_voter':
        success, message = voting_system.add_voter(data.get('voter_id'), data.get('name'))
    elif action == 'cast_vote':
        success, message = voting_system.cast_vote(data.get('voter_id'), data.get('candidate_id'))
    else:
        return jsonify({"success": False, "message": "Invalid endpoint."}), 404

    status_code = 200 if success else 400
    return jsonify({"success": success, "message": message}), status_code

@app.route('/api/results', methods=['GET'])
def get_results():
    results = voting_system.get_results()
    return jsonify(results)

if __name__ == '__main__':
    # First, install dependencies: pip install Flask Flask-Cors
    app.run(debug=True, port=5000)
